import { Behavior } from "./directives/behavior";
/**
 * A node that can be targeted by styles.
 * @public
 */
export interface StyleTarget {
    /**
     * Stylesheets to be adopted by the node.
     */
    adoptedStyleSheets?: CSSStyleSheet[];
    /**
     * Adds styles to the target.
     * @param styles - The styles element to add.
     */
    prepend(styles: HTMLStyleElement): void;
    /**
     * Removes styles from the target.
     * @param styles - The styles element to remove.
     */
    removeChild(styles: HTMLStyleElement): void;
    /**
     * Returns all element descendants of node that match selectors.
     * @param selectors - The CSS selector to use for the query.
     */
    querySelectorAll<E extends Element = Element>(selectors: string): NodeListOf<E>;
}
/**
 * Represents styles that can be composed into the ShadowDOM of a custom element.
 * @public
 */
export declare type ComposableStyles = string | ElementStyles | CSSStyleSheet;
/**
 * Creates an ElementStyles instance for an array of ComposableStyles.
 * @public
 */
export declare type ElementStyleFactory = (styles: ReadonlyArray<ComposableStyles>) => ElementStyles;
/**
 * Represents styles that can be applied to a custom element.
 * @public
 */
export declare abstract class ElementStyles {
    /** @internal */
    abstract readonly styles: ReadonlyArray<ComposableStyles>;
    /** @internal */
    abstract readonly behaviors: ReadonlyArray<Behavior> | null;
    /** @internal */
    abstract addStylesTo(target: StyleTarget): void;
    /** @internal */
    abstract removeStylesFrom(target: StyleTarget): void;
    /**
     * Associates behaviors with this set of styles.
     * @param behaviors - The behaviors to associate.
     */
    withBehaviors(...behaviors: Behavior[]): this;
    /**
     * Adds these styles to a global cache for easy lookup by a known key.
     * @param key - The key to use for lookup and retrieval in the cache.
     */
    withKey(key: string): this;
    /**
     * Attempts to find cached styles by a known key.
     * @param key - The key to search the style cache for.
     */
    static find(key: string): ElementStyles | null;
    /**
     * Create ElementStyles from ComposableStyles.
     */
    static readonly create: ElementStyleFactory;
}
/**
 * https://wicg.github.io/construct-stylesheets/
 * https://developers.google.com/web/updates/2019/02/constructable-stylesheets
 *
 * @internal
 */
export declare class AdoptedStyleSheetsStyles extends ElementStyles {
    styles: ComposableStyles[];
    private readonly styleSheets;
    readonly behaviors: ReadonlyArray<Behavior> | null;
    constructor(styles: ComposableStyles[], styleSheetCache: Map<string, CSSStyleSheet>);
    addStylesTo(target: StyleTarget): void;
    removeStylesFrom(target: StyleTarget): void;
}
/**
 * @internal
 */
export declare class StyleElementStyles extends ElementStyles {
    styles: ComposableStyles[];
    private readonly styleSheets;
    private readonly styleClass;
    readonly behaviors: ReadonlyArray<Behavior> | null;
    constructor(styles: ComposableStyles[]);
    addStylesTo(target: StyleTarget): void;
    removeStylesFrom(target: StyleTarget): void;
}
/**
 * Transforms a template literal string into styles.
 * @param strings - The string fragments that are interpolated with the values.
 * @param values - The values that are interpolated with the string fragments.
 * @remarks
 * The css helper supports interpolation of strings and ElementStyle instances.
 * @public
 */
export declare function css(strings: TemplateStringsArray, ...values: ComposableStyles[]): ElementStyles;
